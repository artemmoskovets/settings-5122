from fractions import Fraction
from itertools import product

# Набор сменных шестерен для станка 5122
шестерни = [
    24, 24, 28, 30, 32, 34, 36, 38, 40, 43, 44, 45, 47, 48, 48, 50, 52, 54, 56,
    57, 58, 59, 60, 60, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 72, 74, 75, 75,
    76, 77, 78, 80, 80, 81, 82, 84, 85, 86, 87, 88, 90, 92, 96, 98
]

def найти_передаточное_отношение(z_dolbyak: int, z_koleso: int) -> Fraction:
    """Вычисляет требуемое передаточное отношение."""
    return Fraction(z_koleso, z_dolbyak)

def подбор_гитары(z_dolbyak: int, z_koleso: int) -> list:
    """Подбирает комбинации колес гитары с условием a+b=120."""
    требуемое = найти_передаточное_отношение(z_dolbyak, z_koleso)
    tolerance = Fraction(1, 10000)  # допустимое отклонение 0.01%
    результаты = []

    for a, b in product(шестерни, repeat=2):
        if a + b != 120:
            continue
        for c, d in product(шестерни, repeat=2):
            pr = Fraction(a * c, b * d)
            if abs(pr - требуемое) <= tolerance:
                результаты.append((a, b, c, d, float(pr)))
    return результаты

if __name__ == "__main__":
    print("=== Расчет гитары для зубодолбежного станка 5122 ===")

    z_dolbyak = int(input("Введите число зубьев долбяка: "))
    z_koleso = int(input("Введите число зубьев заготовки: "))

    req = найти_передаточное_отношение(z_dolbyak, z_koleso)
    print(f"\nТребуемое передаточное отношение: {req} ≈ {float(req):.4f}")

    результаты = подбор_гитары(z_dolbyak, z_koleso)
    if результаты:
        print(f"\nНайдено {len(результаты)} подходящих вариантов:")
        for r in результаты[:50]:  # показываем первые 50
            print(f"{r[0]} {r[1]} {r[2]} {r[3]} => {r[4]:.4f}")
        if len(результаты) > 50:
            print("... Показаны только первые 50 результатов ...")
    else:
        print("\nПодходящие настройки не найдены.")
